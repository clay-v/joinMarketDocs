(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{409:function(e,t,a){"use strict";a.r(t);var n=a(40),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"fidelity-bonds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fidelity-bonds"}},[e._v("#")]),e._v(" Fidelity bonds")]),e._v(" "),a("p",[e._v("Fidelity bonds are a feature of JoinMarket which improves the resistance to\nsybil attacks, and therefore improves the privacy of the system.")]),e._v(" "),a("h2",{attrs:{id:"this-feature-is-incomplete-and-so-is-disabled-for-now"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-feature-is-incomplete-and-so-is-disabled-for-now"}},[e._v("#")]),e._v(" This feature is incomplete and so is disabled for now")]),e._v(" "),a("p",[e._v("A fidelity bond is a mechanism where bitcoin value is deliberately sacrificed\nto make a cryptographic identity expensive to obtain. The sacrifice is done in\na way that can be proven to a third party. Takers in JoinMarket will\nhave a higher probability to create coinjoins with makers who publish more\nvaluable fidelity bonds. This has the effect of making the system much more\nexpensive to sybil attack, because an attacker would have to sacrifice a lot of\nvalue in order to be chosen very often by takers when creating coinjoin.")]),e._v(" "),a("p",[e._v("As a maker you can take part in many more coinjoins and therefore earn more\nfees if you sacrifice bitcoin value to create a fidelity bond. The most\npractical way to create a fidelity bond is to send bitcoins to a time-locked\naddress which uses the opcode "),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Timelock#CheckLockTimeVerify",target:"_blank",rel:"noopener noreferrer"}},[e._v("OP_CHECKLOCKTIMEVERIFY"),a("OutboundLink")],1),e._v(".\nThe valuable thing being sacrificed is the time-value-of-money. Note that a\nlong-term holder (or hodler) of bitcoins can buy time-locked fidelity bonds\nessentially for free, assuming they never intended to transact with their coins\nanyway.")]),e._v(" "),a("p",[e._v("Another way to create fidelity bonds is to destroy coins by sending them to a\n"),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Script#Provably_Unspendable.2FPrunable_Outputs",target:"_blank",rel:"noopener noreferrer"}},[e._v("OP_RETURN"),a("OutboundLink")],1),e._v("\noutput.")]),e._v(" "),a("p",[e._v("The private keys to fidelity bonds can be kept in "),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Cold_storage",target:"_blank",rel:"noopener noreferrer"}},[e._v("cold storage"),a("OutboundLink")],1),e._v("\nfor added security.")]),e._v(" "),a("p",[e._v("For a more detailed explanation of how fidelity bonds work see these documents:")]),e._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://gist.github.com/chris-belcher/18ea0e6acdb885a2bfbdee43dcd6b5af/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design for improving JoinMarket's resistance to sybil attacks using fidelity\nbonds"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://gist.github.com/chris-belcher/87ebbcbb639686057a389acb9ab3e25b",target:"_blank",rel:"noopener noreferrer"}},[e._v("Financial mathematics of JoinMarket fidelity bonds"),a("OutboundLink")],1)])])]),e._v(" "),a("h4",{attrs:{id:"note-on-privacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#note-on-privacy"}},[e._v("#")]),e._v(" Note on privacy")]),e._v(" "),a("p",[e._v("Bitcoin outputs which create fidelity bonds will be published to the entire\nworld, so before and after creating them make sure the outputs are not linked\nto your identity in any way. Perhaps mix with JoinMarket before and after.")]),e._v(" "),a("h3",{attrs:{id:"creating-a-joinmarket-wallet-which-supports-fidelity-bonds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-joinmarket-wallet-which-supports-fidelity-bonds"}},[e._v("#")]),e._v(" Creating a JoinMarket wallet which supports fidelity bonds")]),e._v(" "),a("p",[e._v("When generating a JoinMarket wallet on the command line, supporting versions\nwill offer an option to make the wallet support fidelity bonds.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(jmvenv) $ python3 wallet-tool.py generate\nWould you like to use a two-factor mnemonic recovery phrase? write 'n' if you don't know what this is (y/n): n\nNot using mnemonic extension\nEnter wallet file encryption passphrase: \nReenter wallet file encryption passphrase: \nInput wallet file name (default: wallet.jmdat): testfidelity.jmdat\nWould you like this wallet to support fidelity bonds? write 'n' if you don't know what this is (y/n): y\nWrite down this wallet recovery mnemonic\n\nevidence initial knee image inspire plug dad midnight blast awkward clean between\n\nGenerated wallet OK\n")])])]),a("p",[e._v("As always, it is crucially important to write down the 12-word "),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Seed_phrase",target:"_blank",rel:"noopener noreferrer"}},[e._v("seed phrase"),a("OutboundLink")],1),e._v('\nas a backup. It is also recommended to write down the name of the creating wallet\n"JoinMarket" and that the fidelity bond option was enabled. Writing the wallet\ncreation date is also useful as it can help with rescanning.')]),e._v(" "),a("h3",{attrs:{id:"obtaining-time-locked-addresses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#obtaining-time-locked-addresses"}},[e._v("#")]),e._v(" Obtaining time-locked addresses")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("wallet-tool.py")]),e._v(" script supports a new method "),a("code",[e._v("gettimelockaddress")]),e._v(" used for\nobtaining time-locked addresses. If coins are sent to these addresses they will\nbe locked up until the timelock date passes. Only mixdepth zero can have\nfidelity bonds in it.")]),e._v(" "),a("p",[e._v("This example creates an address which locks any coins sent to it until April 2020.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(jmvenv) $ python3 wallet-tool.py testfidelity.jmdat gettimelockaddress 2020-4\nEnter wallet decryption passphrase: \npath = m/49'/1'/0'/2/3:1585699200\nCoins sent to this address will be not be spendable until April 2020. Full date: 2020-04-01 00:00:00\nbcrt1qrc2qu3m2l2spayu5kr0k0rnn9xgjz46zsxmruh87a3h3f5zmnkaqlfx7v5\n")])])]),a("p",[e._v("If coins are sent to these addresses they will appear in the usual "),a("code",[e._v("wallet-tool.py")]),e._v("\ndisplay:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("(jmvenv) $ python3 wallet-tool.py -m 0 testfidelity.jmdat\nEnter wallet decryption passphrase: \nJM wallet\nmixdepth    0   fbonds-mpk-tpubDDCbCPdf5wJVGYWB4mZr3E3Lys4NBcEKysrrUrLfhG6sekmrvs6KZNe4i5p5z3FyfwRmKMqB9NWEcEUiTS4LwqfrKPQzhKj6aLihu2EejaU\nexternal addresses  m/49'/1'/0'/0   tpubDEGdmPwmQRcZmGKhaudjch9Fgw4J5yP4bYw5B8LoSDkMdmhBxM4ndEQXHK4r1TPexGjLidxdpeEzsJcdXEe7khWToxCZuN6JiLzvUoHAki2\nm/49'/1'/0'/0/0         2N8jHuQaApgFtQ8UKxKbREAvNxKn4BGX4x2 0.00000000  new\nm/49'/1'/0'/0/1         2Mx5CwDoNcuCT38EDmgenQxv9skHbZfXFdo 0.00000000  new\nm/49'/1'/0'/0/2         2N1tNTTwNyucGGmfDWNVk3AUi3i5S8jVKqn 0.00000000  new\nm/49'/1'/0'/0/3         2N8eBEU5wpWb6kS1gvbRgewtxsmXsMkShV6 0.00000000  new\nm/49'/1'/0'/0/4         2MuHgeSgMsvkcn6aGNW2uk2UXP3xVVnkfh2 0.00000000  new\nm/49'/1'/0'/0/5         2NA8d8um5KmBNNR8dadhbEDYGiTJPFCdjMB 0.00000000  new\nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/1   \nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/2   tpubDEGdmPwmQRcZrzjRmUFqXXyLdRedwxCWQviAFqDe6sXJeZzRNTwmwqMfxN6Ka3v7hEebstrU5kqUNoHsFKaA3RoB2vopL6kLHVo1EQq6USw\nm/49'/1'/0'/2/0:1585699200  bcrt1qrc2qu3m2l2spayu5kr0k0rnn9xgjz46zsxmruh87a3h3f5zmnkaqlfx7v5    0.15000000  2020-04-01 [LOCKED]\nBalance:    0.15000000\nBalance for mixdepth 0: 0.15000000\nTotal balance:  0.15000000\n")])])]),a("h4",{attrs:{id:"spending-time-locked-coins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spending-time-locked-coins"}},[e._v("#")]),e._v(" Spending time-locked coins")]),e._v(" "),a("p",[e._v("Once the time-lock of an address expires the coins can be spent with JoinMarket.")]),e._v(" "),a("p",[e._v("Coins living on time-locked addresses are automatically frozen with\nJoinMarket's coin control feature, so before spending you need to unfreeze the\ncoins using "),a("code",[e._v("python3 wallet-tool.py <walletname> -m 0 freeze")]),e._v(".")]),e._v(" "),a("p",[e._v("Once unfrozen and untimelocked the coins can be spent normally with the scripts\n"),a("code",[e._v("sendpayment.py")]),e._v(", "),a("code",[e._v("tumber.py")]),e._v(", or yield generator.")]),e._v(" "),a("h3",{attrs:{id:"burning-coins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#burning-coins"}},[e._v("#")]),e._v(" Burning coins")]),e._v(" "),a("p",[e._v("Coins can be burned with a special method of the "),a("code",[e._v("sendpayment.py")]),e._v(" script. Set\nthe destination to be "),a("code",[e._v("BURN")]),e._v(". Transactions which burn coins must only have one\ninput and one output, so use coin control to freeze all coins in the zeroth\nmixdepth except one.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 sendpayment.py -N 0 testfidelity3.jmdat 0 BURN\nUser data location: .\n2020-04-07 20:45:25,658 [INFO]  Using this min relay fee as tx fee floor: 1000 sat/vkB (1.0 sat/vB)\nEnter wallet decryption passphrase: \n2020-04-07 20:46:50,449 [INFO]  Estimated miner/tx fees for this coinjoin amount: 0.0%\n2020-04-07 20:46:50,452 [INFO]  Using this min relay fee as tx fee floor: 1000 sat/vkB (1.0 sat/vB)\n2020-04-07 20:46:50,452 [INFO]  Using a fee of : 0.00000200 BTC (200 sat).\n2020-04-07 20:46:50,454 [INFO]  Got signed transaction:\n\n2020-04-07 20:46:50,455 [INFO]  {'ins': [{'outpoint': {'hash': '61d69b4e7abe0ef8a5a9cbabb05463259c3b497a142130a56f81a9259f048cb0',\n                       'index': 0},\n          'script': '160014295beb4eba9b35896683d5b5ff455ee2c646054c',\n          'sequence': 4294967294,\n          'txinwitness': ['3045022100939de908e30015c6b22d2c0f25153e395268466ce44eeeb4ec03a8920440e87b0220155d1c43dedb3fc2654205541bb2821dd5211180e2d7f93d67301470652830d401',\n                          '03ec0f8b267f99ff5259195ce63813d58f38ffbaada894ce06af0c0303c74bbf82']}],\n 'locktime': 1361,\n 'outs': [{'script': '6a147631c805d8ad9239677b8d7530353fda3fec07ca',\n           'value': 11999800}],\n 'version': 2}\n2020-04-07 20:46:50,455 [INFO]  In serialized form (for copy-paste):\n2020-04-07 20:46:50,455 [INFO]  02000000000101b08c049f25a9816fa53021147a493b9c256354b0abcba9a5f80ebe7a4e9bd6610000000017160014295beb4eba9b35896683d5b5ff455ee2c646054cfeffffff01381ab70000000000166a147631c805d8ad9239677b8d7530353fda3fec07ca02483045022100939de908e30015c6b22d2c0f25153e395268466ce44eeeb4ec03a8920440e87b0220155d1c43dedb3fc2654205541bb2821dd5211180e2d7f93d67301470652830d4012103ec0f8b267f99ff5259195ce63813d58f38ffbaada894ce06af0c0303c74bbf8251050000\n2020-04-07 20:46:50,456 [INFO]  Sends: 0.11999800 BTC (11999800 sat) to destination: BURNER OUTPUT embedding pubkey at m/49'/1'/0'/3/0\n\nWARNING: This transaction if broadcasted will PERMANENTLY DESTROY your bitcoins\n\nWould you like to push to the network? (y/n):y\n2020-04-07 20:47:52,047 [DEBUG]  rpc: sendrawtransaction ['02000000000101b08c049f25a9816fa53021147a493b9c256354b0abcba9a5f80ebe7a4e9bd6610000000017160014295beb4eba9b35896683d5b5ff455ee2c646054cfeffffff01381ab70000000000166a147631c805d8ad9239677b8d7530353fda3fec07ca02483045022100939de908e30015c6b22d2c0f25153e395268466ce44eeeb4ec03a8920440e87b0220155d1c43dedb3fc2654205541bb2821dd5211180e2d7f93d67301470652830d4012103ec0f8b267f99ff5259195ce63813d58f38ffbaada894ce06af0c0303c74bbf8251050000']\n2020-04-07 20:47:52,049 [WARNING]  Connection had broken pipe, attempting reconnect.\n2020-04-07 20:47:52,440 [INFO]  Transaction sent: 656bb4538f14f2cc874043915907b6c9c46a807ef9818bde771d07630d54b0f7\ndone\n")])])]),a("p",[e._v("Embedded in the "),a("code",[e._v("OP_RETURN")]),e._v(" output is the hash of a pubkey from the wallet.")]),e._v(" "),a("p",[e._v("Now "),a("code",[e._v("OP_RETURN")]),e._v(" outputs are not addresses, and because of technical reasons the\nfirst time they are synchronized the flag "),a("code",[e._v("--recoversync")]),e._v(" must be used. When\nthis is done the burn output will appear in the "),a("code",[e._v("wallet-tool.py")]),e._v(" display.\n"),a("code",[e._v("--recoversync")]),e._v(" only needs to be used once, and after that the burner output is\nsaved in the "),a("code",[e._v("wallet.jmdat")]),e._v(" file which can be accesses by all future\nsynchronizations.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 wallet-tool.py --datadir=. --recoversync testfidelity2.jmdat\nEnter wallet decryption passphrase: \n2020-04-07 23:09:54,644 [INFO]  Found a burner transaction txid=656bb4538f14f2cc874043915907b6c9c46a807ef9818bde771d07630d54b0f7 path = m/49'/1'/0'/3/0\n2020-04-07 23:09:54,769 [WARNING]  Merkle branch not available, use wallet-tool `addtxoutproof`\n2020-04-07 23:09:55,420 [INFO]  Found a burner transaction txid=656bb4538f14f2cc874043915907b6c9c46a807ef9818bde771d07630d54b0f7 path = m/49'/1'/0'/3/0\n2020-04-07 23:09:55,422 [WARNING]  Merkle branch not available, use wallet-tool `addtxoutproof`\nJM wallet\nmixdepth    0   fbonds-mpk-tpubDDCXgSpdxuVbXgzRYBggFeMRNeV9eH24jJuQNunyqwYtDFiB7ZS63LhXwHkf7o9ZcZW4qUz7uvD6yk4BkkF3bBPmJRPv7RBTEA5hHwEdV2f\nexternal addresses  m/49'/1'/0'/0   tpubDEJGorVywRb6LoLQbaqWZh2gYwpdZqViCNZ2ejB5kpBuUp16LHpK6ESFaJLixidtbmmjcDwVZ4QjnAbKmypfuGaEk3ifgonPv4vsugqgp9G\nm/49'/1'/0'/0/2         2MviB2FfLKZjFb3W2dJ8kXcQBj3jqMJg7TL 0.00000000  new\nm/49'/1'/0'/0/3         2MtsAQhE2u9VGV3aZ7XM4PzwWGHXr4PAhqP 0.00000000  new\nm/49'/1'/0'/0/4         2N3iXNjS4vkTXzy5Jidnovc6FJeNQJx5Fnt 0.00000000  new\nm/49'/1'/0'/0/5         2MtT4XAjwQQ7PBbrTxv7qcQMMmz4Rs5XrE3 0.00000000  new\nm/49'/1'/0'/0/6         2NEuG23BQESuZTqSDtab9zYsd1Jb4KfMULB 0.00000000  new\nm/49'/1'/0'/0/7         2N6NGJRX6KYQWtYWK8iHFuJNpZRs8NbUAC9 0.00000000  new\nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/1\nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/2   tpubDEJGorVywRb6T34X7ZAEz9hQYn6CCEhrcFa8kA2mqNau2DvoggZP2QTtXRe8t9NSfMkx3ye8QDzqCE9gEqso6fw5ALk5xycWLFwTRLSqSUV\nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/3   tpubDEJGorVywRb6V5em9Q7LFJ9eLEAEZmZxUdDmkknrKNUs7vKcCWPKwP8YPjuxFCCXk2F1wJnubNbmgbtWed5yiE3D1qxzLonVuXT6QEZPaof\nm/49'/1'/0'/3/0         BURN-7631c805d8ad9239677b8d7530353fda3fec07ca   0.11999800  656bb4538f14f2cc874043915907b6c9c46a807ef9818bde771d07630d54b0f7 [NO MERKLE PROOF]\nBalance:    0.11999800\nBalance for mixdepth 0: 0.11999800\nTotal balance:  0.11999800\n")])])]),a("h4",{attrs:{id:"adding-the-merkle-proof-of-a-burn-transaction-if-missing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding-the-merkle-proof-of-a-burn-transaction-if-missing"}},[e._v("#")]),e._v(" Adding the merkle proof of a burn transaction if missing")]),e._v(" "),a("p",[e._v("In order to prove a burn output exists, a merkle proof is needed. If the Core\nnode is pruned and the block deleted then JoinMarket will not be able to obtain\nthe merkle proof (as in the above example). In this case the proof can be\nadded separately.")]),e._v(" "),a("p",[e._v("Any other unpruned Core node can trustlessly obtain the proof and give it to\nthe user with the RPC call "),a("code",[e._v("gettxoutproof")]),e._v(".")]),e._v(" "),a("p",[e._v("First obtain the merkle proof:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('$ bitcoin-cli gettxoutproof "[\\"656bb4538f14f2cc874043915907b6c9c46a807ef9818bde771d07630d54b0f7\\"]" 4cce28f4eb1ea1762ec4ceb90529b3ab28c0423ac630c6292319e2b2712daada\n0000002056e4050f54084a1d6e6944b209cce76ebe2da4b37f3aa47ab6c612831d3220471015e80d3050cf0ee05b216036030fe3d4906221196943a30e828741ad4cfaeb05d98c5effff7f20010000000200000002a5910e5cf4e6cb6d55e1e2ca979987772a482e8a8f30b7a6cab8c5671f5c161df7b0540d63071d77de8b81f97e806ac4c9b6075991434087ccf2148f53b46b650105\n')])])]),a("p",[e._v("Then add it to the JoinMarket wallet:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 wallet-tool.py -H \"m/49'/1'/0'/3/0\" testfidelity2.jmdat addtxoutproof 0000002056e4050f54084a1d6e6944b209cce76ebe2da4b37f3aa47ab6c612831d3220471015e80d3050cf0ee05b216036030fe3d4906221196943a30e828741ad4cfaeb05d98c5effff7f20010000000200000002a5910e5cf4e6cb6d55e1e2ca979987772a482e8a8f30b7a6cab8c5671f5c161df7b0540d63071d77de8b81f97e806ac4c9b6075991434087ccf2148f53b46b650105\nEnter wallet decryption passphrase: \nDone\n")])])]),a("p",[e._v("The "),a("code",[e._v("-H")]),e._v(" flag must point to the path containing the burn output.")]),e._v(" "),a("p",[e._v("Then synchronizing the wallet won't output the no-merkle-proof warning.")]),e._v(" "),a("h3",{attrs:{id:"creating-watch-only-fidelity-bond-wallets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-watch-only-fidelity-bond-wallets"}},[e._v("#")]),e._v(" Creating watch-only fidelity bond wallets")]),e._v(" "),a("p",[e._v("Fidelity bonds can be held on an offline computer in\n"),a("a",{attrs:{href:"https://en.bitcoin.it/wiki/Cold_storage",target:"_blank",rel:"noopener noreferrer"}},[e._v("cold storage"),a("OutboundLink")],1),e._v(". To do this we create\na watch-only fidelity bond wallet.")]),e._v(" "),a("p",[e._v("When fidelity bonds are displayed in "),a("code",[e._v("wallet-tool.py")]),e._v(", their master public key\nis highlighted with a prefix "),a("code",[e._v("fbonds-mpk-")]),e._v(".")]),e._v(" "),a("p",[e._v("This master public key can be used to create a watch-only wallet using\n"),a("code",[e._v("wallet-tool.py")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 wallet-tool.py createwatchonly fbonds-mpk-tpubDDCbCPdf5wJVGYWB4mZr3E3Lys4NBcEKysrrUrLfhG6sekmrvs6KZNe4i5p5z3FyfwRmKMqB9NWEcEUiTS4LwqfrKPQzhKj6aLihu2EejaU\nInput wallet file name (default: watchonly.jmdat): watchfidelity.jmdat\nEnter wallet file encryption passphrase: \nReenter wallet file encryption passphrase: \nDone\n")])])]),a("p",[e._v("Then the wallet can be displayed like a regular wallet, although only the zeroth\nmixdepth will be shown.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 wallet-tool.py watchfidelity.jmdat\nUser data location: .\nEnter wallet decryption passphrase: \nJM wallet\nmixdepth    0   fbonds-mpk-tpubDDCbCPdf5wJVGYWB4mZr3E3Lys4NBcEKysrrUrLfhG6sekmrvs6KZNe4i5p5z3FyfwRmKMqB9NWEcEUiTS4LwqfrKPQzhKj6aLihu2EejaU\nexternal addresses  m/49'/1'/0'/0   tpubDEGdmPwmQRcZmGKhaudjch9Fgw4J5yP4bYw5B8LoSDkMdmhBxM4ndEQXHK4r1TPexGjLidxdpeEzsJcdXEe7khWToxCZuN6JiLzvUoHAki2\nm/49'/1'/0'/0/0         2N8jHuQaApgFtQ8UKxKbREAvNxKn4BGX4x2 0.00000000  used\nm/49'/1'/0'/0/1         2Mx5CwDoNcuCT38EDmgenQxv9skHbZfXFdo 0.00000000  new\nm/49'/1'/0'/0/2         2N1tNTTwNyucGGmfDWNVk3AUi3i5S8jVKqn 0.00000000  new\nm/49'/1'/0'/0/3         2N8eBEU5wpWb6kS1gvbRgewtxsmXsMkShV6 0.00000000  new\nm/49'/1'/0'/0/4         2MuHgeSgMsvkcn6aGNW2uk2UXP3xVVnkfh2 0.00000000  new\nm/49'/1'/0'/0/5         2NA8d8um5KmBNNR8dadhbEDYGiTJPFCdjMB 0.00000000  new\nm/49'/1'/0'/0/6         2NG76BAHPccfyy6sH68EHrB9QJBycx3FKb6 0.00000000  new\nBalance:    0.25000000\ninternal addresses  m/49'/1'/0'/1\nBalance:    0.00000000\ninternal addresses  m/49'/1'/0'/2   tpubDEGdmPwmQRcZrzjRmUFqXXyLdRedwxCWQviAFqDe6sXJeZzRNTwmwqMfxN6Ka3v7hEebstrU5kqUNoHsFKaA3RoB2vopL6kLHVo1EQq6USw\nm/49'/1'/0'/0/3:1585699200  bcrt1qrc2qu3m2l2spayu5kr0k0rnn9xgjz46zsxmruh87a3h3f5zmnkaqlfx7v5    0.15000000  2020-04-01 [UNLOCKED]\nBalance:    0.15000000\ninternal addresses  m/49'/1'/0'/3   tpubDEGdmPwmQRcZuX3uNrCouu5bRgp2GJcoQTvhkFAJMTA3yxhKmQyeGwecbnkms4DYmBhCJn2fGTuejTe3g8oyJW3qKcfB4b3Swj2hDk1h4Y2\nBalance:    0.00000000\nBalance for mixdepth 0: 0.15000000\nTotal balance:  0.15000000\n")])])]),a("h3",{attrs:{id:"bip32-paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bip32-paths"}},[e._v("#")]),e._v(" BIP32 Paths")]),e._v(" "),a("p",[e._v("Fidelity bond wallets extend the BIP32 path format to include the locktime\nvalues. In this example we've got "),a("code",[e._v("m/49'/1'/0'/2/0:1583020800")]),e._v(" where the\nnumber after the colon is the locktime value in Unix time.")]),e._v(" "),a("p",[e._v("This path can be passed to certain wallet methods like "),a("code",[e._v("dumpprivkey")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("$ python3 wallet-tool.py -H \"m/49'/1'/0'/2/0:1583020800\" testfidelity.jmdat dumpprivkey\nEnter wallet decryption passphrase: \ncNEuE5ypNTxVFCyC5iH7u5AQTrddamcUHRPNweiLvmHUWd6XXDkz\n")])])])])}),[],!1,null,null,null);t.default=i.exports}}]);