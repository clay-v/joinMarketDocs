(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{407:function(e,t,n){"use strict";n.r(t);var a=n(40),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"notes-on-architectural-changes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notes-on-architectural-changes"}},[e._v("#")]),e._v(" Notes on architectural changes")]),e._v(" "),n("p",[e._v("Motivation: By separating the code which manages conversation with other\nJoinmarket participants from the code which manages this participant's Bitcoin\nwallet actions, we get a considerable gain at a minor cost of an additional layer:\ncode dependencies for each part are much reduced, security requirements of the\nserver/daemon layer are massively reduced (which can have several advantages such as\nit being more acceptable to distribute this layer as a binary), and client code\ncan be written, implementing application-level logic (do join with coins X under condition X)\nusing other Bitcoin libraries, or wallets, without knowing anything about\nJoinmarket's inter-participant protocol. An example is my work on the Joinmarket\nelectrum "),n("a",{attrs:{href:"https://github.com/AdamISZ/electrum-joinmarket-plugin",target:"_blank",rel:"noopener noreferrer"}},[e._v("plugin"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("It also\nmeans that updates to the Bitcoin element of Joinmarket, such as P2SH and segwit, should\nhave extremely minimal to no impact on the backend code, since the latter just implements\ncommunication of a set of formatted messages, and allows the client to decide on\ntheir validity beyond simply syntax.")]),e._v(" "),n("p",[e._v("Joinmarket's own "),n("a",{attrs:{href:"https://github.com/JoinMarket-Org/JoinMarket-Docs/blob/master/Joinmarket-messaging-protocol.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("messaging protocol"),n("OutboundLink")],1),e._v(" is thus enforced "),n("em",[e._v("only")]),e._v(" in the server/daemon.")]),e._v(" "),n("p",[e._v("The client and server currently communicate using twisted.protocol.amp, see\n"),n("a",{attrs:{href:"https://amp-protocol.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("AMP"),n("OutboundLink")],1),e._v(",\nand the specification of the communication between the client and server is isolated to\n"),n("a",{attrs:{href:"https://github.com/AdamISZ/joinmarket-clientserver/blob/master/jmbase/jmbase/commands.py",target:"_blank",rel:"noopener noreferrer"}},[e._v("this"),n("OutboundLink")],1),e._v(" module.\nCurrently the messaging layer of Joinmarket is IRC-only (but easily extensible, see "),n("a",{attrs:{href:"https://github.com/JoinMarket-Org/joinmarket/issues/650",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".\nThe IRC layer is also implemented here using Twisted, reducing the complexity required with threading.")]),e._v(" "),n("p",[e._v('The "server" is just a daemon service that can be run as a separate process (see '),n("code",[e._v("scripts/joinmarketd.py")]),e._v("), or for convenience in the same process (the default for command line scripts).")])])}),[],!1,null,null,null);t.default=r.exports}}]);